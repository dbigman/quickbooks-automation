{
  "id": "snapshot_1759934530148_40wzq99iy",
  "approvalId": "approval_1759934530133_60u2y28yl",
  "approvalTitle": "Approve Tasks: quickbooks-autoreport-refactoring",
  "version": 1,
  "timestamp": "2025-10-08T14:42:10.148Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Tasks Document\n\nThis tasks plan is aligned to the approved requirements [requirements.md](.spec-workflow/specs/quickbooks-autoreport-refactoring/requirements.md:1) and design [design.md](.spec-workflow/specs/quickbooks-autoreport-refactoring/design.md:1). Follow spec-workflow Implementation rules: mark each task as in-progress by changing \"[ ]\" to \"[-]\" when you start, and mark complete by changing \"[-]\" to \"[x]\" when finished.\n\n- [ ] 1. Write unit tests for domain models\n  - Files: [tests/unit/test_domain/test_report_config.py](tests/unit/test_domain/test_report_config.py), [tests/unit/test_domain/test_report_result.py](tests/unit/test_domain/test_report_result.py), [tests/unit/test_domain/test_settings.py](tests/unit/test_domain/test_settings.py), [tests/unit/test_domain/test_diagnostics.py](tests/unit/test_domain/test_diagnostics.py)\n  - Purpose: Verify dataclass behavior, validation, and serialization for domain models\n  - Steps:\n    - Add tests for creation, immutability (where applicable), and methods\n    - Validate error cases and edge cases (invalid dates, intervals)\n    - Ensure serialization methods return correct structures\n  - _Leverage: [report_config.py](src/quickbooks_autoreport/domain/report_config.py:1), [report_result.py](src/quickbooks_autoreport/domain/report_result.py:1), [settings.py](src/quickbooks_autoreport/domain/settings.py:1), [diagnostics.py](src/quickbooks_autoreport/domain/diagnostics.py:1)\n  - _Requirements: 2.1, 2.2, 2.3, 4.1, 4.2, 4.3, 4.4, 7.1, 7.2, 7.3, 7.4\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Create comprehensive unit tests for domain models with clear success/failure scenarios. Restrictions: do not modify domain model APIs; preserve immutability where declared; follow naming conventions. Success: tests run deterministic, cover positive and negative paths, and pass in CI. Instructions: Edit [tasks.md](.spec-workflow/specs/quickbooks-autoreport-refactoring/tasks.md:1) and change this task to [-] when starting, then [x] when complete.\n\n- [ ] 2. Establish adapter classes and explicit DI\n  - Files: [logger_adapter.py](src/quickbooks_autoreport/adapters/logger_adapter.py), [file_adapter.py](src/quickbooks_autoreport/adapters/file_adapter.py), [settings_adapter.py](src/quickbooks_autoreport/adapters/settings_adapter.py), [connection.py](src/quickbooks_autoreport/adapters/quickbooks/connection.py:1), [request_handler.py](src/quickbooks_autoreport/adapters/quickbooks/request_handler.py:1), [error_handler.py](src/quickbooks_autoreport/adapters/quickbooks/error_handler.py:1)\n  - Purpose: Provide clear interfaces for I/O and QuickBooks integration with injected dependencies\n  - Steps:\n    - Wrap existing utilities into adapter classes\n    - Ensure all adapters accept dependencies via constructor (logger, settings path, etc.)\n    - Document public methods and types\n  - _Leverage: [file_utils.py](src/quickbooks_autoreport/utils/file_utils.py:1), [logging_utils.py](src/quickbooks_autoreport/utils/logging_utils.py:1)\n  - _Requirements: 2.1, 2.2, 3.2, 3.3, 3.8, 6.1, 6.2, 6.3, 6.5\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Create adapter classes with explicit constructors and typed methods, encapsulating I/O and QuickBooks COM operations. Restrictions: do not introduce side effects in services; do not hardcode paths; avoid global state. Success: adapters are testable and injectable with clear interfaces.\n\n- [ ] 3. Adapter unit tests\n  - Files: [tests/unit/test_adapters/test_file_adapter.py](tests/unit/test_adapters/test_file_adapter.py), [tests/unit/test_adapters/test_settings_adapter.py](tests/unit/test_adapters/test_settings_adapter.py), [tests/unit/test_adapters/test_connection.py](tests/unit/test_adapters/test_connection.py), [tests/unit/test_adapters/test_xml_pipeline.py](tests/unit/test_adapters/test_xml_pipeline.py)\n  - Purpose: Validate adapters independently with mocks/fakes\n  - Steps:\n    - Test file read/write/hash and directory handling\n    - Test settings load/save/defaults/validation\n    - Test connection lifecycle with context manager patterns\n    - Test qbXML build/parse flows via request/response samples\n  - _Leverage: [connection.py](src/quickbooks_autoreport/adapters/quickbooks/connection.py:1), [qbxml_generator.py](src/quickbooks_autoreport/services/qbxml_generator.py:1), [report_parser.py](src/quickbooks_autoreport/services/report_parser.py:1)\n  - _Requirements: 7.1, 7.2, 7.4\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Write isolated adapter tests using mocks and fixture data. Restrictions: do not call real COM; do not perform real filesystem writes without tmp directories. Success: high coverage, deterministic behavior, and robust error scenario tests.\n\n- [ ] 4. Refactor services to use domain models and DI\n  - Files: [report_service.py](src/quickbooks_autoreport/services/report_service.py:1), [export_service.py](src/quickbooks_autoreport/services/export_service.py:1), [diagnostics_service.py](src/quickbooks_autoreport/services/diagnostics_service.py:1), [scheduler.py](src/quickbooks_autoreport/services/scheduler.py:1), [report_generator.py](src/quickbooks_autoreport/services/report_generator.py), [csv_creator.py](src/quickbooks_autoreport/services/csv_creator.py), [excel_creator.py](src/quickbooks_autoreport/services/excel_creator.py), [insights_generator.py](src/quickbooks_autoreport/services/insights_generator.py)\n  - Purpose: Ensure business logic orchestrates adapters and uses typed domain models end-to-end\n  - Steps:\n    - Update signatures to accept domain models (ReportConfig, ReportResult)\n    - Inject adapters via constructors; remove internal instantiations\n    - Extract CSV/Excel creators into dedicated classes\n    - Implement ReportGenerator orchestrator with typed return values\n  - _Leverage: [report_config.py](src/quickbooks_autoreport/domain/report_config.py:1), [report_result.py](src/quickbooks_autoreport/domain/report_result.py:1)\n  - _Requirements: 2.1, 2.2, 3.1, 3.2, 3.5, 3.6, 3.7, 3.8, 6.2, 6.4, 6.6\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Refactor service layer to dependency injection and typed models. Restrictions: do not perform I/O in services; respect separation of concerns. Success: services compile, tests pass, and logic is isolated from I/O.\n\n- [ ] 5. Service unit tests\n  - Files: [tests/unit/test_services/test_report_generator.py](tests/unit/test_services/test_report_generator.py), [tests/unit/test_services/test_csv_creator.py](tests/unit/test_services/test_csv_creator.py), [tests/unit/test_services/test_excel_creator.py](tests/unit/test_services/test_excel_creator.py), [tests/unit/test_services/test_insights_generator.py](tests/unit/test_services/test_insights_generator.py), [tests/unit/test_services/test_scheduler.py](tests/unit/test_services/test_scheduler.py)\n  - Purpose: Validate business logic correctness and error handling\n  - Steps:\n    - Mock adapters for orchestration tests\n    - Validate formatting outputs and insights generation\n    - Verify scheduler start/stop/thread safety\n  - _Leverage: [qbxml_generator.py](src/quickbooks_autoreport/services/qbxml_generator.py:1), [report_parser.py](src/quickbooks_autoreport/services/report_parser.py:1)\n  - _Requirements: 7.1, 7.2, 7.4\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Write comprehensive unit tests for services using mocks and fixtures. Restrictions: no real I/O; ensure deterministic tests. Success: coverage and reliability meet thresholds.\n\n- [ ] 6. Refactor CLI to dependency injection\n  - Files: [__main__.py](apps/cli/__main__.py), [cli.py](src/quickbooks_autoreport/cli.py:1)\n  - Purpose: Use DI to compose services/adapters for CLI workflows\n  - Steps:\n    - Create apps/cli entry point and wire dependencies\n    - Move orchestration from src CLI into apps CLI with DI\n    - Preserve command-line options and diagnostic mode\n  - _Leverage: [LoggerAdapter](src/quickbooks_autoreport/adapters/logger_adapter.py), [SettingsAdapter](src/quickbooks_autoreport/adapters/settings_adapter.py), [ReportGenerator](src/quickbooks_autoreport/services/report_generator.py)\n  - _Requirements: 2.1, 2.2, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Refactor CLI to apps/cli with DI. Restrictions: maintain existing flags and behaviors; do not break diagnostic mode. Success: CLI runs and composes dependencies via DI.\n\n- [ ] 7. Refactor GUI to dependency injection\n  - Files: [__main__.py](apps/gui/__main__.py), [main_window.py](apps/gui/main_window.py), [gui.py](src/quickbooks_autoreport/gui.py:1), [widgets/__init__.py](apps/gui/widgets/__init__.py), [widgets/status_panel.py](apps/gui/widgets/status_panel.py), [widgets/config_panel.py](apps/gui/widgets/config_panel.py), [widgets/report_grid.py](apps/gui/widgets/report_grid.py)\n  - Purpose: Initialize GUI via DI and modularize widgets\n  - Steps:\n    - Create apps/gui structure with entry point and widgets\n    - Inject services into GUI components\n    - Ensure responsiveness and settings persistence\n  - _Leverage: [Scheduler](src/quickbooks_autoreport/services/scheduler.py:1), [ReportGenerator](src/quickbooks_autoreport/services/report_generator.py)\n  - _Requirements: 2.1, 2.2, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Refactor GUI to apps/gui with DI. Restrictions: preserve GUI feature parity and responsiveness. Success: GUI initializes and operates with injected services.\n\n- [ ] 8. Application integration tests\n  - Files: [tests/integration/test_cli_workflows.py](tests/integration/test_cli_workflows.py), [tests/integration/test_gui_init.py](tests/integration/test_gui_init.py)\n  - Purpose: Validate end-to-end flows for CLI and GUI\n  - Steps:\n    - Test CLI arguments, diagnostic mode, and report generation flow\n    - Test GUI initialization and event handlers with mocks\n  - _Leverage: [tests/fixtures](tests/fixtures)\n  - _Requirements: 7.1, 7.3, 7.4\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Write integration tests for apps. Restrictions: maintain isolation; use fixtures and tmp dirs. Success: key workflows validated.\n\n- [ ] 9. Comprehensive report flow testing\n  - Files: [tests/integration/test_report_flow.py](tests/integration/test_report_flow.py), [tests/fixtures/sample_responses.xml](tests/fixtures/sample_responses.xml)\n  - Purpose: Validate complete report generation pipeline\n  - Steps:\n    - Build fixtures for sample qbXML responses and expected outputs\n    - Verify CSV/Excel outputs and change detection/hash updates\n  - _Leverage: [qbxml_generator.py](src/quickbooks_autoreport/services/qbxml_generator.py:1), [report_parser.py](src/quickbooks_autoreport/services/report_parser.py:1), [file_utils.py](src/quickbooks_autoreport/utils/file_utils.py:1)\n  - _Requirements: 7.1, 7.2, 7.3, 7.5, 7.6\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Test end-to-end report flow across report types. Restrictions: avoid real QuickBooks; simulate responses. Success: end-to-end validation passes.\n\n- [ ] 10. Backward compatibility verification\n  - Files: [quickbooks_autoreport.py](quickbooks_autoreport.py:1), [export_service.py](src/quickbooks_autoreport/services/export_service.py:1)\n  - Purpose: Ensure behavior parity for outputs, settings, logs, and scheduling\n  - Steps:\n    - Compare outputs to historical formats\n    - Validate settings file format and log compatibility\n    - Verify all 9 report types generate correctly\n  - _Leverage: [README.md](README.md:1)\n  - _Requirements: 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Verify backward compatibility. Restrictions: do not change public-facing formats. Success: parity across outputs and features.\n\n- [ ] 11. Performance testing\n  - Files: [tests/integration/test_performance.py](tests/integration/test_performance.py)\n  - Purpose: Benchmark report generation, Excel creation, GUI startup, and memory\n  - Steps:\n    - Add micro-benchmarks and scenario timings\n    - Ensure performance is equivalent or better than current implementation\n  - _Leverage: [scheduler.py](src/quickbooks_autoreport/services/scheduler.py:1)\n  - _Requirements: 13.1, 13.2, 13.3, 13.4, 13.5\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Create performance tests and compare baselines. Restrictions: avoid flaky measurements; use controlled environments. Success: meets performance targets.\n\n- [ ] 12. Code quality checks\n  - Files: [pyproject.toml](pyproject.toml:1)\n  - Purpose: Enforce ruff, black, isort, mypy with strict settings\n  - Steps:\n    - Configure and run tools; fix issues\n    - Achieve >90% coverage in core modules\n  - _Leverage: [tests/test_basic.py](tests/test_basic.py:1)\n  - _Requirements: 2.6, 7.4\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Run and satisfy code quality gates. Restrictions: do not relax strict mode; fix issues properly. Success: all checks pass.\n\n- [ ] 13. Documentation updates\n  - Files: [README.md](README.md:1), [ARCHITECTURE.md](ARCHITECTURE.md:1), [docs/migration_guide.md](docs/migration_guide.md), [docs/api_reference.md](docs/api_reference.md)\n  - Purpose: Reflect new architecture, migration path, and public APIs\n  - Steps:\n    - Update README with structure/usage\n    - Add architecture diagrams and ADRs if applicable\n    - Document public APIs from docstrings; write migration guide\n  - _Leverage: [design.md](.spec-workflow/specs/quickbooks-autoreport-refactoring/design.md:1), [requirements.md](.spec-workflow/specs/quickbooks-autoreport-refactoring/requirements.md:1)\n  - _Requirements: 14.1, 14.2, 14.3, 14.4, 14.5\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Update documentation per spec. Restrictions: ensure accuracy and consistency; do not expose sensitive info. Success: docs are complete and accurate.\n\n- [ ] 14. Migration script (optional if parity confirmed)\n  - Files: [scripts/migrate_monolith_to_hex.py](scripts/migrate_monolith_to_hex.py)\n  - Purpose: Assist users in migrating old settings/files to new structure\n  - Steps:\n    - Provide re-mapping for settings paths and logs\n    - Validate migrated environment\n  - _Leverage: [settings.py](src/quickbooks_autoreport/domain/settings.py:1)\n  - _Requirements: 14.4\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Create migration helper script. Restrictions: non-destructive; backup originals. Success: migrations succeed with validations.\n\n- [ ] 15. Final validation and cleanup\n  - Files: [CHANGELOG.md](CHANGELOG.md), [PROJECT_COMPLETE.md](PROJECT_COMPLETE.md:1)\n  - Purpose: Validate all tasks and quality gates, archive obsolete artifacts if any\n  - Steps:\n    - Run full test suite; confirm all green\n    - Re-run code quality; confirm strict compliance\n    - Comprehensive manual verification (CLI/GUI)\n    - Tag release version and compile final report\n  - _Leverage: [spec-status](.spec-workflow/specs/quickbooks-autoreport-refactoring/tasks.md:1)\n  - _Requirements: All\n  - _Prompt: Implement the task for spec quickbooks-autoreport-refactoring, first run spec-workflow-guide to get the workflow guide then implement the task: Perform final validation and cleanup. Restrictions: do not remove needed files; ensure full parity. Success: release tagged and documentation finalized.",
  "fileStats": {
    "size": 16692,
    "lines": 166,
    "lastModified": "2025-10-08T14:41:50.268Z"
  },
  "comments": []
}