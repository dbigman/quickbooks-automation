{
  "id": "snapshot_1759933908673_psi0k4lq3",
  "approvalId": "approval_1759933908629_eqadboc6z",
  "approvalTitle": "Approve Design: quickbooks-autoreport-refactoring",
  "version": 1,
  "timestamp": "2025-10-08T14:31:48.672Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Design Document\n\n## Overview\n\nThis document describes the architectural design for refactoring the monolithic `quickbooks_autoreport.py` into a modular, maintainable codebase following hexagonal architecture principles.\nThe refactoring preserves all existing functionality while improving code quality, testability, and maintainability.\nCore business logic is isolated from external dependencies; adapters handle I/O; services orchestrate workflows; domain models represent data.\n\n## Steering Document Alignment\n\n### Technical Standards (tech.md)\nThis design follows documented technical patterns including type safety, explicit dependency injection, and layered architecture.\nLogging, validation, and error handling conform to standards defined in [tech.md](.spec-workflow/steering/tech.md:1).\nConfiguration is environment-driven with secure handling of sensitive data.\n\n### Project Structure (structure.md)\nImplementation will follow the project organization conventions described in [structure.md](.spec-workflow/steering/structure.md:1).\nApplications (CLI/GUI) are entry points; services orchestrate business logic; adapters provide external integrations; domain models remain pure.\nData flow adheres to clear boundaries to maintain separation of concerns.\n\n## Code Reuse Analysis\n\n### Existing Components to Leverage\n- [report_service.py](src/quickbooks_autoreport/services/report_service.py:1) ‚Äî report orchestration\n- [diagnostics_service.py](src/quickbooks_autoreport/services/diagnostics_service.py:1) ‚Äî system diagnostics\n- [export_service.py](src/quickbooks_autoreport/services/export_service.py:1) ‚Äî CSV/Excel export helpers\n- [qbxml_generator.py](src/quickbooks_autoreport/services/qbxml_generator.py:1) ‚Äî qbXML request builder\n- [report_parser.py](src/quickbooks_autoreport/services/report_parser.py:1) ‚Äî QuickBooks response parsing\n- [scheduler.py](src/quickbooks_autoreport/services/scheduler.py:1) ‚Äî scheduled execution\n- [connection.py](src/quickbooks_autoreport/adapters/quickbooks/connection.py:1) ‚Äî QuickBooks COM connection\n- [request_handler.py](src/quickbooks_autoreport/adapters/quickbooks/request_handler.py:1) ‚Äî qbXML request execution\n- [error_handler.py](src/quickbooks_autoreport/adapters/quickbooks/error_handler.py:1) ‚Äî error translation\n- [file_utils.py](src/quickbooks_autoreport/utils/file_utils.py:1) ‚Äî file system operations\n- [logging_utils.py](src/quickbooks_autoreport/utils/logging_utils.py:1) ‚Äî centralized logging\n- [exceptions.py](src/quickbooks_autoreport/domain/exceptions.py:1) ‚Äî structured exceptions\n- [report_config.py](src/quickbooks_autoreport/domain/report_config.py:1) ‚Äî report configuration model\n- [report_result.py](src/quickbooks_autoreport/domain/report_result.py:1) ‚Äî report result model\n- [settings.py](src/quickbooks_autoreport/domain/settings.py:1) ‚Äî application settings model\n- [diagnostics.py](src/quickbooks_autoreport/domain/diagnostics.py:1) ‚Äî diagnostics data model\n- [cli.py](src/quickbooks_autoreport/cli.py:1) ‚Äî command-line application\n- [gui.py](src/quickbooks_autoreport/gui.py:1) ‚Äî graphical user interface\n\n### Integration Points\n- QuickBooks Desktop COM via qbXML requests and responses\n- File system for outputs, logs, and hashes\n- JSON settings persistence with validation on load\n\n## Architecture\n\nRefactoring follows hexagonal architecture:\n- Domain models are pure and immutable where appropriate\n- Services encapsulate business workflows without direct I/O\n- Adapters translate between external systems and domain models\n- Applications (CLI/GUI) compose services and adapters\n\n### Modular Design Principles\n- Single File Responsibility: each file handles one concern\n- Component Isolation: small, focused components\n- Service Layer Separation: data access, business logic, and presentation\n- Utility Modularity: focused, single-purpose utilities\n\n```mermaid\ngraph TD\n    A[Apps: CLI/GUI] --> B[Services]\n    B --> C[Adapters]\n    B --> D[Domain Models]\n    C --> E[External Systems (QuickBooks, FS)]\n```\n\n## Components and Interfaces\n\n### Domain Layer\n- ReportConfig ‚Äî configuration and file path derivation\n- ReportResult ‚Äî execution metadata and success status\n- Settings ‚Äî app configuration and validation\n- DiagnosticResult ‚Äî system diagnostics representation\n- Exceptions ‚Äî QuickBooksConnectionError, ReportGenerationError, FileOperationError, SettingsError\n\n### Services Layer\n- Report Service ‚Äî orchestrates report generation across types\n- Export Service ‚Äî creates CSV and Excel outputs with professional formatting\n- QBXML Generator ‚Äî builds qbXML requests and normalizes XML\n- Report Parser ‚Äî extracts headers and rows and detects errors\n- Scheduler ‚Äî manages timers and threading safely\n- Diagnostics Service ‚Äî runs installation and connectivity checks\n\n### Adapters Layer\n- QuickBooks Connection ‚Äî COM lifecycle and request execution\n- Request Handler ‚Äî batch execution and version fallbacks\n- Error Handler ‚Äî mapping low-level errors to domain exceptions\n- Settings Adapter ‚Äî load/save JSON settings, defaults, validation\n- File Adapter ‚Äî read/write files, ensure directories, compute hashes\n\n### Utilities\n- Logging Utilities ‚Äî structured logging with emoji indicators\n- File Utilities ‚Äî safe I/O, hashing, and path helpers\n\n### Application Layer\n- CLI ‚Äî argument parsing, mode selection, orchestrates services\n- GUI ‚Äî Tkinter-based interface, status updates, user actions\n\n## Data Models\n\n```python\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import Optional, Dict, Any, List\n\n@dataclass(frozen=True)\nclass ReportConfig:\n    key: str\n    name: str\n    qbxml_type: str\n    query_type: str\n    csv_filename: str\n    excel_filename: str\n    hash_filename: str\n    request_log: str\n    response_log: str\n    uses_date_range: bool\n\n@dataclass\nclass ReportResult:\n    report_key: str\n    report_name: str\n    rows: int\n    changed: bool\n    timestamp: datetime\n    excel_created: bool\n    insights: Optional[dict]\n    connect_info: Dict[str, Any]\n    error: Optional[str] = None\n\n@dataclass\nclass Settings:\n    output_dir: str\n    interval: str\n    report_date_from: str\n    report_date_to: str\n    company_file: Optional[str] = None\n```\n\n## Error Handling\n\n- Translate COM errors to specific domain exceptions with actionable solutions\n- Maintain structured logging with emoji indicators for clarity (üì• üìä ‚úÖ ‚ùå)\n- Avoid leaking sensitive information in user-facing messages\n\n## Testing Strategy\n\n### Unit Testing\n- Domain models: 100% coverage (pure, deterministic)\n- Services: high coverage with mocked adapters\n- Adapters: interface-focused tests; simulate COM and file operations\n\n### Integration Testing\n- End-to-end report generation with sample responses and temporary directories\n- Settings persistence across runs\n- Error recovery scenarios\n\n### End-to-End Testing\n- CLI workflows: diagnostics and report generation\n- GUI workflows: initialization, actions, status updates\n- Build validation and runtime diagnostics\n\n## Implementation Notes\n\n- Maintain backward compatibility with current outputs and settings\n- Migrate application entry points to apps/ structure when feasible\n- Incremental refactoring to avoid breaking working code\n\n## Conclusion\n\nThis design provides a solid blueprint for aligning the QuickBooks Auto Reporter with hexagonal architecture, maximizing reuse of existing modules while improving testability and maintainability.",
  "fileStats": {
    "size": 7467,
    "lines": 174,
    "lastModified": "2025-10-08T14:31:26.450Z"
  },
  "comments": []
}